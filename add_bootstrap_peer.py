#!/usr/bin/env python3
# add_bootstrap_peer.py - C√¥ng c·ª• th√™m Peer v√†o c·∫•u h√¨nh Bootstrap

# -*- coding: utf-8 -*-

"""
M·ªôt c√¥ng c·ª• d√≤ng l·ªánh an to√†n ƒë·ªÉ th√™m ho·∫∑c c·∫≠p nh·∫≠t c√°c node
trong t·ªáp 'bootstrap_config.json'.

- ƒê·ªçc t·ªáp c·∫•u h√¨nh hi·ªán c√≥.
- H·ªèi ng∆∞·ªùi d√πng th√¥ng tin v·ªÅ node m·ªõi (ID, IP, Port).
- Ki·ªÉm tra tr√πng l·∫∑p Node ID.
- C·∫≠p nh·∫≠t v√† ghi l·∫°i t·ªáp JSON m·ªôt c√°ch ch√≠nh x√°c.
"""

import os
import sys
import json

# --- C·∫§U H√åNH ---
BOOTSTRAP_CONFIG_FILE = "bootstrap_config.json"

def load_or_create_bootstrap_config() -> dict:
    """T·∫£i t·ªáp bootstrap. N·∫øu kh√¥ng c√≥ ho·∫∑c b·ªã l·ªói, t·∫°o m·ªôt c·∫•u tr√∫c m·ªõi."""
    if os.path.exists(BOOTSTRAP_CONFIG_FILE):
        try:
            with open(BOOTSTRAP_CONFIG_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                # ƒê·∫£m b·∫£o c·∫•u tr√∫c c∆° b·∫£n t·ªìn t·∫°i
                if "trusted_bootstrap_peers" not in data:
                    data["trusted_bootstrap_peers"] = {}
                return data
        except json.JSONDecodeError:
            print(f"‚ö†Ô∏è C·∫¢NH B√ÅO: T·ªáp '{BOOTSTRAP_CONFIG_FILE}' b·ªã l·ªói ƒë·ªãnh d·∫°ng JSON.")
            choice = input("B·∫°n c√≥ mu·ªën t·∫°o m·ªôt t·ªáp m·ªõi kh√¥ng? (H√†nh ƒë·ªông n√†y s·∫Ω x√≥a n·ªôi dung c≈©) (yes/no): ").lower()
            if choice == 'yes':
                return {"trusted_bootstrap_peers": {}}
            else:
                print("‚ùå ƒê√£ h·ªßy. Vui l√≤ng s·ª≠a t·ªáp JSON th·ªß c√¥ng.")
                sys.exit(1)
    else:
        # N·∫øu t·ªáp kh√¥ng t·ªìn t·∫°i, t·∫°o c·∫•u tr√∫c r·ªóng
        return {"trusted_bootstrap_peers": {}}

def save_bootstrap_config(data: dict):
    """L∆∞u d·ªØ li·ªáu v√†o t·ªáp bootstrap m·ªôt c√°ch an to√†n."""
    try:
        # Ghi v√†o t·ªáp t·∫°m tr∆∞·ªõc ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n
        temp_file = BOOTSTRAP_CONFIG_FILE + ".tmp"
        with open(temp_file, 'w', encoding='utf-8') as f:
            # indent=2 gi√∫p t·ªáp d·ªÖ ƒë·ªçc h∆°n
            json.dump(data, f, indent=2)
        # Thay th·∫ø t·ªáp c≈© b·∫±ng t·ªáp t·∫°m m·ªôt c√°ch "nguy√™n t·ª≠"
        os.replace(temp_file, BOOTSTRAP_CONFIG_FILE)
        print(f"\n‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng t·ªáp '{BOOTSTRAP_CONFIG_FILE}'.")
    except Exception as e:
        print(f"\n‚ùå L·ªñI: Kh√¥ng th·ªÉ l∆∞u t·ªáp c·∫•u h√¨nh. L·ªói: {e}")

def main():
    """H√†m ch√≠nh c·ªßa c√¥ng c·ª•."""
    print("--- üîß C√¥ng c·ª• C·∫≠p nh·∫≠t Bootstrap Peers ---")
    
    # T·∫£i d·ªØ li·ªáu hi·ªán c√≥ ho·∫∑c t·∫°o m·ªõi
    config_data = load_or_create_bootstrap_config()
    peers = config_data.get("trusted_bootstrap_peers", {})

    # L·∫•y th√¥ng tin t·ª´ ng∆∞·ªùi d√πng
    print("\nNh·∫≠p th√¥ng tin cho node m·ªõi:")
    new_node_id = input("  - Node ID: ").strip()
    new_node_ip = input("  - ƒê·ªãa ch·ªâ IP (v√≠ d·ª•: 192.168.1.100): ").strip()
    new_node_port_str = input("  - Port (v√≠ d·ª•: 5000): ").strip()

    # Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if not all([new_node_id, new_node_ip, new_node_port_str]):
        print("\n‚ùå L·ªói: T·∫•t c·∫£ c√°c tr∆∞·ªùng th√¥ng tin l√† b·∫Øt bu·ªôc.")
        return
        
    try:
        port = int(new_node_port_str)
    except ValueError:
        print("\n‚ùå L·ªói: Port ph·∫£i l√† m·ªôt con s·ªë.")
        return

    # T·∫°o ƒë·ªãa ch·ªâ chu·∫©n
    new_address = f"http://{new_node_ip}:{port}"

    # Ki·ªÉm tra xung ƒë·ªôt (Tr√°i tim c·ªßa vi·ªác "kh√¥ng ·∫£nh h∆∞·ªüng c·∫•u tr√∫c c≈©")
    if new_node_id in peers:
        print("\n‚ö†Ô∏è TH√îNG B√ÅO: Node ID n√†y ƒë√£ t·ªìn t·∫°i trong c·∫•u h√¨nh.")
        print(f"   ƒê·ªãa ch·ªâ hi·ªán t·∫°i l√†: {peers[new_node_id].get('last_known_address')}")
        update_choice = input(f"   B·∫°n c√≥ mu·ªën c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ th√†nh '{new_address}' kh√¥ng? (yes/no): ").lower()
        if update_choice != 'yes':
            print("‚ÑπÔ∏è ƒê√£ h·ªßy b·ªè, kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë∆∞·ª£c th·ª±c hi·ªán.")
            return

    # Th√™m ho·∫∑c c·∫≠p nh·∫≠t th√¥ng tin node
    peers[new_node_id] = {
        "last_known_address": new_address
    }
    
    # ƒê·∫∑t l·∫°i d·ªØ li·ªáu v√†o c·∫•u tr√∫c ch√≠nh v√† l∆∞u
    config_data["trusted_bootstrap_peers"] = peers
    save_bootstrap_config(config_data)

    print("\n--- T√≥m t·∫Øt thay ƒë·ªïi ---")
    print(f"Node ID: {new_node_id}")
    print(f"ƒê·ªãa ch·ªâ: {new_address}")
    print("------------------------")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nƒê√£ h·ªßy b·ªüi ng∆∞·ªùi d√πng.")
